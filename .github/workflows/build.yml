name: Build English Learning App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  QT_VERSION: 6.8.2
  CMAKE_VERSION: 3.27

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_msvc2022_64
        modules: 'qtmultimedia qtspeech'
        cache: true
        
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cd build
        cmake --build . --config Release --parallel
        
    - name: Deploy Qt
      shell: pwsh
      run: |
        cd build/Release
        $qtPath = "$env:RUNNER_WORKSPACE\Qt\${{ env.QT_VERSION }}\msvc2022_64\bin\windeployqt.exe"
        if (Test-Path $qtPath) {
          Write-Host "Found windeployqt.exe at: $qtPath"
          & $qtPath EnglishLearningApp.exe --qmldir ../../ --compiler-runtime --verbose 2
        } else {
          # Fallback: try to find windeployqt.exe
          Write-Host "Searching for windeployqt.exe..."
          $qtDirs = Get-ChildItem -Path "$env:RUNNER_WORKSPACE" -Recurse -Name "windeployqt.exe" -ErrorAction SilentlyContinue
          if ($qtDirs.Count -gt 0) {
            $qtPath = Join-Path $env:RUNNER_WORKSPACE $qtDirs[0]
            Write-Host "Found windeployqt.exe at: $qtPath"
            & $qtPath EnglishLearningApp.exe --qmldir ../../ --compiler-runtime --verbose 2
          } else {
            Write-Error "windeployqt.exe not found"
            exit 1
          }
        }
        
    - name: Copy Resources
      shell: pwsh
      run: |
        if (Test-Path "resources") {
          Write-Host "Copying resources..."
          Copy-Item -Path "resources" -Destination "build/Release/resources" -Recurse -Force
        } else {
          Write-Host "No resources directory found, skipping..."
        }
        
    - name: Package Application
      shell: pwsh
      run: |
        # Remove package directory if it exists
        if (Test-Path "package") {
          Remove-Item -Path "package" -Recurse -Force
        }
        
        # Create fresh package structure
        New-Item -ItemType Directory -Path "package\EnglishLearningApp" -Force
        
        # Copy all files from build/Release
        Write-Host "Copying application files..."
        Get-ChildItem -Path "build\Release\*" | Copy-Item -Destination "package\EnglishLearningApp\" -Recurse -Force
        
        # List contents for verification
        Write-Host "Package contents:"
        Get-ChildItem -Path "package\EnglishLearningApp\" -Recurse | Format-Table Name, Length
        
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EnglishLearningApp-Windows-x64
        path: package/
        retention-days: 30

  create-release:
    if: github.event_name == 'release'
    needs: [build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: EnglishLearningApp-Windows-x64
        path: artifacts/EnglishLearningApp-Windows-x64
        
    - name: Create release archive
      run: |
        cd artifacts/EnglishLearningApp-Windows-x64
        zip -r ../../EnglishLearningApp-Windows-x64.zip .
        cd ../..
        
        # Verify archive was created
        ls -la *.zip
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: EnglishLearningApp-Windows-x64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_msvc2022_64
        modules: 'qtmultimedia qtspeech'
        cache: true
        
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: ${{ env.CMAKE_VERSION }}
        
    - name: Configure CMake (Debug)
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug
        
    - name: Build (Debug)
      run: |
        cd build
        cmake --build . --config Debug --parallel
        
    - name: Test build success
      shell: pwsh
      run: |
        if (Test-Path "build\Debug\EnglishLearningApp.exe") {
          Write-Host "✅ Build successful!"
          Write-Host "File info:"
          Get-Item "build\Debug\EnglishLearningApp.exe" | Format-List Name, Length, CreationTime
        } else {
          Write-Host "❌ Build failed - executable not found"
          Write-Host "Contents of Debug directory:"
          if (Test-Path "build\Debug") {
            Get-ChildItem "build\Debug" | Format-Table Name, Length
          } else {
            Write-Host "Debug directory doesn't exist"
          }
          Write-Host "Contents of build directory:"
          Get-ChildItem "build" | Format-Table Name, Length
          exit 1
        }